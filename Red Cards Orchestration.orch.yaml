type: "orchestration"
version: "1.0"
pipeline:
  components:
    Start:
      type: "start"
      transitions:
        unconditional:
        - "Premier League"
      parameters:
        componentName: "Start"
    Premier League:
      type: "modular-api-extract-input-v1"
      transitions:
        success:
        - "Yesterday's Date"
      parameters:
        componentName: "Premier League"
        inputId: "api-extract-input-v1"
        api-extract-input-v1:
          profile: "custom-a34da799-8276-401d-ad6a-0b52e9b243b7"
          endpoint: "Red Card Leaders"
          connectionRef:
            authType: "NONE"
          uriParams:
          queryParams:
          - name: "league"
            value: "39"
          - name: "season"
            value: "2022"
          headerParams:
          - name: "X-RapidAPI-Key"
            value: "ffcbe1c542msh9dc112366802618p1962a4jsnc0f8a1c434aa"
          - name: "X-RapidAPI-Host"
            value: "api-football-v1.p.rapidapi.com"
          postBody:
          pageLimit:
        outputId: "snowflake-output-connector-v0"
        snowflake-output-connector-v0:
          warehouse: "[Environment Default]"
          database: "[Environment Default]"
          schema: "[Environment Default]"
          tableName: "REDCARDS_SEMISTRUCTURED"
          createTableMode: "REPLACE_IF_EXISTS"
          cleanStagedFiles: "Yes"
          stagePlatform: "SNOWFLAKE"
          snowflake#internalStageType: "USER"
    Yesterday's Date:
      type: "python-pushdown"
      transitions:
        success:
        - "Unpack JSON & Join Last Updated Date"
      parameters:
        componentName: "Yesterday's Date"
        externalAccessIntegrations:
        packages:
        pythonScript: |
          from datetime import datetime, timedelta

          # Get today's date
          today = datetime.now()

          # Calculate yesterday's date
          yesterday = today - timedelta(days=1)

          # Format yesterday's date
          formatted_yesterday = yesterday.strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]

          print(formatted_yesterday)

          context.updateVariable('proj_yest_date', formatted_yesterday)
          # Updating a grid variable:
          #   context.updateGridVariable('mygridvar',[['list','of'],['lists','!']])
          ###)
        scriptTimeout: "360"
    Unpack JSON & Join Last Updated Date:
      type: "run-transformation"
      transitions:
        success:
        - "Grid Iterator"
      parameters:
        componentName: "Unpack JSON & Join Last Updated Date"
        transformationJob: "Red Cards Transformation"
        setScalarVariables:
        - - "xform_yestdate"
          - "${orch_yestdate}"
        setGridVariables:
    dbt debug:
      type: "commands-for-dbt-core"
      parameters:
        componentName: "dbt debug"
        command: "${pv_dbt_command}"
        dbtUrl: "https://github.com/MatillionPartnerEngineering/dbt_matillion_repo.git"
        branch: "webinar_1"
        gitFolderPath:
        userName: "MatillionPartnerEngineering"
        gitPassword: "kg_github_matillionpartnerengineering"
        mapDbtEnvironmentVariables:
        - - "target_database"
          - "ANALYTICS"
        - - "target_schema"
          - "PUBLIC"
        config:
        profileConfig:
    Grid Iterator:
      type: "grid-iterator"
      transitions:
        success:
        - "ChatGPT - Coach's advice"
      iterationTarget: "dbt debug"
      parameters:
        componentName: "Grid Iterator"
        gridVariable: "gv_dbt_commands"
        gridIteratorVariableMapping:
        - - "gvc_dbt_commands"
          - "pv_dbt_command"
        breakOnFailure: "No"
        concurrency: "Sequential"
    ChatGPT - Coach's advice:
      type: "ai-prompt"
      parameters:
        componentName: "ChatGPT - Coach's advice"
        service:
          provider: "OpenAI"
          openAI:
            model: "gpt-4"
            apiKey: "kg_chatgpt2"
            temperature: "1"
            topP: "1"
            "n": "1"
            maxTokens:
        source:
          snowflake:
            database: "[Environment Default]"
            schema: "[Environment Default]"
            table: "STG_REDCARDS_STRUCTURED"
            keyColumn: "PLAYERNAME"
            limit: "1000"
        promptContext:
          userContext: |-
            I want you to imagine you're a coach of the player (PLAYERNAME) from the same country (NATIONALITY) as the player. Evaluate the performance of the player using the statistics provided in columns, which include:
            - the number of shots by the player on the opposing goal (SHOTS_ONGOAL; SHOTS_TOTAL)
            - the number of fouls committed and drawn by the player (FOULS_COMMITTED; FOULS_DRAWN)
            - the number of goals assisted and scored by the player (GOALS_ASSISTS: GOALS_TOTAL)
            - the number of cards drawn on the player (SUMCARDS)
            Using the information, give the player advice in the language of the NATIONALITY field to help improve the players' game towards becoming a better player in the Premier League and helping their team (TEAMNAME) win more matches.
          inputs:
          - - "NATIONALITY"
            - ""
          - - "PLAYERNAME"
            - ""
          - - "TEAMNAME"
            - ""
          - - "SHOTS_ONGOAL"
            - ""
          - - "SHOTS_TOTAL"
            - ""
          - - "FOULS_COMMITTED"
            - ""
          - - "FOULS_DRAWN"
            - ""
          - - "GOALS_ASSISTS"
            - ""
          - - "GOALS_TOTAL"
            - ""
          - - "SUMCARDS"
            - ""
          outputFormat: "TEXT"
        ragConfig:
          isRagEnabled: "No"
        destination:
          snowflake:
            database: "[Environment Default]"
            schema: "[Environment Default]"
            table: "REDCARDS_GPT"
            createTableOptions: "Replace if Table Exists"
  variables:
    orch_yestdate:
      metadata:
        type: "TEXT"
        description: ""
        scope: "COPIED"
        visibility: "PUBLIC"
      defaultValue: "2024-02-19"
    pv_dbt_command:
      metadata:
        type: "TEXT"
        description: ""
        scope: "COPIED"
        visibility: "PUBLIC"
      defaultValue: "DEFAULT pv_dbt_command"
    gv_dbt_commands:
      metadata:
        type: "GRID"
        description: ""
        scope: "COPIED"
        visibility: "PUBLIC"
        columns:
          gvc_dbt_commands:
            columnType: "TEXT"
      defaultValue:
      - - "dbt debug"
      - - "dbt source freshness"
      - - "dbt build"
design:
  components:
    Start:
      position:
        x: -240
        "y": 0
      tempMetlId: 1
    Premier League:
      position:
        x: -50
        "y": 0
      tempMetlId: 2
    Yesterday's Date:
      position:
        x: 150
        "y": 0
      tempMetlId: 3
    Unpack JSON & Join Last Updated Date:
      position:
        x: 350
        "y": 0
      tempMetlId: 5
    dbt debug:
      position:
        x: 560
        "y": -10
      tempMetlId: 8
    Grid Iterator:
      position:
        x: 560
        "y": -10
      tempMetlId: 12
    ChatGPT - Coach's advice:
      position:
        x: 790
        "y": 0
      tempMetlId: 13
  notes:
    "4":
      position:
        x: -120
        "y": -350
      size:
        height: 450
        width: 180
      theme: "white"
      content: "The **Premier League** component is a modular-api-extract-input transformation.\
        \ It makes a call to the Red Card Leaders endpoint of the API Football v1\
        \ API to retrieve red card data for the 2022 Premier League season. It extracts\
        \ the results and outputs them to a Snowflake table called REDCARDS_SEMISTRUCTURED\
        \ using the snowflake-output-connector."
    "5":
      position:
        x: 80
        "y": -280
      size:
        height: 380
        width: 180
      theme: "white"
      content: "The **Yesterday's Date** component runs a Python script to extract\
        \ yesterday's date. This date is then stored in the orchestration variable\
        \ `${orch_yestdate}` and passed to subsequent components for use in filtering\
        \ or partitioning data by date."
    "6":
      position:
        x: 280
        "y": -440
      size:
        height: 540
        width: 180
      theme: "white"
      content: "The **Unpack JSON & Join Last Updated Date** transformation takes\
        \ the JSON data extracted from the Premier League API and unpacks it into\
        \ a structured format. It also joins the date variable `${orch_yestdate}`\
        \ that was generated in the previous `Yesterday's Date` component to annotate\
        \ each row with the date it was run. This prepares the data for further transformation\
        \ and loading into the data warehouse."
    "7":
      position:
        x: 480
        "y": -340
      size:
        height: 440
        width: 210
      theme: "white"
      content: "The **Grid Iterator** component iterates over the values in the `gv_dbt_commands`\
        \ grid variable and runs the `dbt debug` component for each value, mapping\
        \ the current grid value to the `pv_dbt_command` pipeline variable each time.\
        \ This allows running multiple dbt commands like `dbt debug`, `dbt source\
        \ freshness` and `dbt build` by specifying them in the grid variable."
