type: "orchestration"
version: "1.0"
pipeline:
  components:
    Start:
      type: "start"
      transitions:
        unconditional:
        - "Premier League"
      parameters:
        componentName: "Start"
    Premier League:
      type: "modular-api-extract-input-v1"
      transitions:
        success:
        - "Yesterday's Date"
      parameters:
        componentName: "Premier League"
        inputId: "api-extract-input-v1"
        api-extract-input-v1:
          profile: "custom-a34da799-8276-401d-ad6a-0b52e9b243b7"
          endpoint: "Red Card Leaders"
          connectionRef:
            authType: "NONE"
          uriParams:
          queryParams:
          - name: "league"
            value: "39"
          - name: "season"
            value: "2022"
          headerParams:
          - name: "X-RapidAPI-Key"
            value: "ffcbe1c542msh9dc112366802618p1962a4jsnc0f8a1c434aa"
          - name: "X-RapidAPI-Host"
            value: "api-football-v1.p.rapidapi.com"
          postBody:
          pageLimit:
        outputId: "snowflake-output-connector-v0"
        snowflake-output-connector-v0:
          warehouse: "[Environment Default]"
          database: "[Environment Default]"
          schema: "[Environment Default]"
          tableName: "REDCARDS_SEMISTRUCTURED"
          createTableMode: "REPLACE_IF_EXISTS"
          cleanStagedFiles: "Yes"
          stagePlatform: "SNOWFLAKE"
          snowflake#internalStageType: "USER"
    Yesterday's Date:
      type: "python-pushdown"
      transitions:
        success:
        - "Unpack JSON & Join Last Updated Date"
      parameters:
        componentName: "Yesterday's Date"
        externalAccessIntegrations:
        packages:
        pythonScript: |
          from datetime import datetime, timedelta

          # Get today's date
          today = datetime.now()

          # Calculate yesterday's date
          yesterday = today - timedelta(days=1)

          # Format yesterday's date
          formatted_yesterday = yesterday.strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]

          print(formatted_yesterday)

          context.updateVariable('proj_yest_date', formatted_yesterday)
          # Updating a grid variable:
          #   context.updateGridVariable('mygridvar',[['list','of'],['lists','!']])
          ###)
        scriptTimeout: "360"
    Unpack JSON & Join Last Updated Date:
      type: "run-transformation"
      transitions:
        success:
        - "Grid Iterator"
        - "Grid Iterator 2"
      parameters:
        componentName: "Unpack JSON & Join Last Updated Date"
        transformationJob: "Red Cards Transformation"
        setScalarVariables:
        - - "xform_yestdate"
          - "${orch_yestdate}"
        setGridVariables:
    dbt debug:
      type: "commands-for-dbt-core"
      parameters:
        componentName: "dbt debug"
        command: "${pv_dbt_command}"
        config:
        mapDbtEnvironmentVariables:
        - - "target_database"
          - "ANALYTICS"
        - - "target_schema"
          - "PUBLIC"
        dbtUrl: "https://github.com/MatillionPartnerEngineering/dbt_matillion_repo.git"
        branch: "webinar_1"
        gitFolderPath:
        userName: "MatillionPartnerEngineering"
        gitPassword: "kg_github_matillionpartnerengineering"
        profileConfig:
    dbt deps:
      type: "commands-for-dbt-core"
      parameters:
        componentName: "dbt deps"
        command: "dbt deps"
        config:
        mapDbtEnvironmentVariables:
        - - "target_database"
          - "ANALYTICS"
        - - "target_schema"
          - "PUBLIC"
        dbtUrl: "https://github.com/MatillionPartnerEngineering/dbt_matillion_repo.git"
        branch: "main"
        gitFolderPath:
        userName: "MatillionPartnerEngineering"
        gitPassword: "kg_github_matillionpartnerengineering"
        profileConfig:
    Grid Iterator:
      type: "grid-iterator"
      transitions:
        success:
        - "ChatGPT - Coach's advice"
      iterationTarget: "dbt debug"
      parameters:
        componentName: "Grid Iterator"
        gridVariable: "gv_dbt_commands"
        gridIteratorVariableMapping:
        - - "gvc_dbt_commands"
          - "pv_dbt_command"
        breakOnFailure: "No"
        concurrency: "Sequential"
    ChatGPT - Coach's advice:
      type: "ai-prompt"
      parameters:
        componentName: "ChatGPT - Coach's advice"
        service:
          provider: "OpenAI"
          openAI:
            model: "gpt-4"
            apiKey: "kg_chatgpt2"
            temperature: "1"
            topP: "1"
            "n": "1"
            maxTokens:
        source:
          snowflake:
            database: "[Environment Default]"
            schema: "[Environment Default]"
            table: "STG_REDCARDS_STRUCTURED"
            keyColumn: "PLAYERNAME"
            limit: "1000"
        promptContext:
          userContext: |-
            I want you to imagine you're a coach of the player (PLAYERNAME) from the same country (NATIONALITY) as the player. Evaluate the performance of the player using the statistics provided in columns, which include:
            - the number of shots by the player on the opposing goal (SHOTS_ONGOAL; SHOTS_TOTAL)
            - the number of fouls committed and drawn by the player (FOULS_COMMITTED; FOULS_DRAWN)
            - the number of goals assisted and scored by the player (GOALS_ASSISTS: GOALS_TOTAL)
            - the number of cards drawn on the player (SUMCARDS)
            Using the information, give the player advice in the language of the NATIONALITY field to help improve the players' game towards becoming a better player in the Premier League and helping their team (TEAMNAME) win more matches.
          inputs:
          - - "NATIONALITY"
            - ""
          - - "PLAYERNAME"
            - ""
          - - "TEAMNAME"
            - ""
          - - "SHOTS_ONGOAL"
            - ""
          - - "SHOTS_TOTAL"
            - ""
          - - "FOULS_COMMITTED"
            - ""
          - - "FOULS_DRAWN"
            - ""
          - - "GOALS_ASSISTS"
            - ""
          - - "GOALS_TOTAL"
            - ""
          - - "SUMCARDS"
            - ""
          outputFormat: "TEXT"
        ragConfig:
          isRagEnabled: "No"
        destination:
          snowflake:
            database: "[Environment Default]"
            schema: "[Environment Default]"
            table: "REDCARDS_GPT"
            createTableOptions: "Replace if Table Exists"
    Grid Iterator 2:
      type: "grid-iterator"
      iterationTarget: "dbt debug 2"
      parameters:
        componentName: "Grid Iterator 2"
        gridVariable: "gv_dbt_commands"
        gridIteratorVariableMapping:
        - - "gvc_dbt_commands"
          - "pv_dbt_command"
        breakOnFailure: "No"
        concurrency: "Sequential"
    dbt debug 2:
      type: "commands-for-dbt-core"
      parameters:
        componentName: "dbt debug 2"
        command: "${pv_dbt_command}"
        config:
        mapDbtEnvironmentVariables:
        - - "target_database"
          - "ANALYTICS"
        - - "target_schema"
          - "PUBLIC"
        dbtUrl: "https://github.com/MatillionPartnerEngineering/dbt_matillion_repo.git"
        branch: "webinar_1"
        gitFolderPath:
        userName: "MatillionPartnerEngineering"
        gitPassword: "kg_github_matillionpartnerengineering"
        profileConfig:
  variables:
    orch_yestdate:
      metadata:
        type: "TEXT"
        description: ""
        scope: "COPIED"
        visibility: "PUBLIC"
      defaultValue: "2024-02-19"
    pv_dbt_command:
      metadata:
        type: "TEXT"
        description: ""
        scope: "COPIED"
        visibility: "PUBLIC"
      defaultValue: "DEFAULT pv_dbt_command"
    gv_dbt_commands:
      metadata:
        type: "GRID"
        description: ""
        scope: "COPIED"
        visibility: "PUBLIC"
        columns:
          gvc_dbt_commands:
            columnType: "TEXT"
      defaultValue:
      - - "dbt debug"
      - - "dbt source freshness"
      - - "dbt build"
design:
  components:
    Start:
      position:
        x: -150
        "y": 0
      tempMetlId: 1
    Premier League:
      position:
        x: -10
        "y": 0
      tempMetlId: 2
    Yesterday's Date:
      position:
        x: 140
        "y": 0
      tempMetlId: 3
    Unpack JSON & Join Last Updated Date:
      position:
        x: 300
        "y": 0
      tempMetlId: 5
    dbt debug:
      position:
        x: 460
        "y": -10
      tempMetlId: 8
    dbt deps:
      position:
        x: 820
        "y": -180
      tempMetlId: 10
    Grid Iterator:
      position:
        x: 460
        "y": -10
      tempMetlId: 12
    ChatGPT - Coach's advice:
      position:
        x: 610
        "y": 0
      tempMetlId: 13
    Grid Iterator 2:
      position:
        x: 460
        "y": 100
      tempMetlId: 14
    dbt debug 2:
      position:
        x: 460
        "y": 100
      tempMetlId: 15
  notes:
    "1":
      position:
        x: 470
        "y": -260
      size:
        height: 158
        width: 300
      theme: "white"
      content: "Once Query Result to Grid exists, can query for player IDs, feed as\
        \ query params in API calls"
    "2":
      position:
        x: 770
        "y": -260
      size:
        height: 158
        width: 230
      theme: "white"
      content: "Can't currently install packages"
    "3":
      position:
        x: 160
        "y": -260
      size:
        height: 158
        width: 300
      theme: "white"
      content: "Once bug is set to allow values to carry to child jobs this can be\
        \ used."
    "4":
      position:
        x: -680
        "y": -270
      size:
        height: 578
        width: 400
      theme: "white"
      content: "BYOGit Webinar Demo Workflow\n1. Setup\n\n1a. Create new Github account\
        \ and install app from marketplace- @kareygrahamgithubwebinartest1\n\n1b.\
        \ Create & initialize repo\n\n1c. Create new Matillion Hub project with \n\
        \n2. Advanced Settings In Action\n\n2a. dbt Premier League\nOnce finished\
        \ send to Richard Lewis\n\n2b. Create new branch off main, which has a job\
        \ in Production\n\n2c. Two devs working on same project - move to v2 version\
        \ of webinar\n\n2d. Git actions - Hard reset; Commit; Push to remote\n\n2e.\
        \ Show DPL in Github Repo\n\n2f. Merge to main (Production aka default branch)\n\
        \n2g. Pull from Remote into new DPC Project"
